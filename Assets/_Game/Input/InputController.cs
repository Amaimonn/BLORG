//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.9.0
//     from Assets/_Game/Input/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @InputController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""Wizard"",
            ""id"": ""e38bc58d-1b44-4f49-8c45-2056d9430ac3"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a6fcc91e-bd7c-47a2-a70d-023345ef02bc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""9d18bd3d-1e3c-4d8a-87cd-55962d01d80b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""dca278a9-ce1d-42c8-996c-08c12e3eeee5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Atack"",
                    ""type"": ""Button"",
                    ""id"": ""471ecc51-684d-4751-b17d-63a2e65e67ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelAtack"",
                    ""type"": ""Button"",
                    ""id"": ""6690132d-df0a-49f9-bb05-71232dbe0133"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeToBlue"",
                    ""type"": ""Button"",
                    ""id"": ""5230bb69-bcc0-4d82-bb68-505b113585f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeToOrange"",
                    ""type"": ""Button"",
                    ""id"": ""775b6e21-0dc2-44fe-8f88-f94e926a06b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeToGreen"",
                    ""type"": ""Button"",
                    ""id"": ""8fb38052-0df4-409e-802b-b74df885e520"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""554ec727-1ade-4dd2-b4c6-579048450979"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7708a248-5ba3-47d5-bfba-f1d5e6f3373a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b3437500-cf7e-42ef-8862-c88b59a3f6d6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fbbecb75-1d41-4696-af9a-622dbb77021d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0ce20d39-235b-47e1-9779-990a1e9030b2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7fcc6824-1ee9-4c17-9439-49dce43dbaff"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01d100a7-e4ad-4e61-9aed-dd83f38267e1"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse;Touch"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c95d2f1-f238-4e81-b301-810e8cb7e26b"",
                    ""path"": ""<Joystick>/{Hatswitch}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Joystick"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c9e989c-939f-49d0-9e2d-74f8748bc79d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""882106e0-806d-4085-87d6-67a0907db052"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Atack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""884cd4e7-e9bf-4fa0-86b5-46f78dbf56d7"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelAtack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87707acd-9f6b-40c0-b4f2-56f5d5cbffe4"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeToBlue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30143276-707c-4e7b-b407-d947359fc644"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeToOrange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e32de7b1-6df8-4976-b1e0-f29a3ed48671"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeToGreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Wizard
        m_Wizard = asset.FindActionMap("Wizard", throwIfNotFound: true);
        m_Wizard_Move = m_Wizard.FindAction("Move", throwIfNotFound: true);
        m_Wizard_Look = m_Wizard.FindAction("Look", throwIfNotFound: true);
        m_Wizard_Jump = m_Wizard.FindAction("Jump", throwIfNotFound: true);
        m_Wizard_Atack = m_Wizard.FindAction("Atack", throwIfNotFound: true);
        m_Wizard_CancelAtack = m_Wizard.FindAction("CancelAtack", throwIfNotFound: true);
        m_Wizard_ChangeToBlue = m_Wizard.FindAction("ChangeToBlue", throwIfNotFound: true);
        m_Wizard_ChangeToOrange = m_Wizard.FindAction("ChangeToOrange", throwIfNotFound: true);
        m_Wizard_ChangeToGreen = m_Wizard.FindAction("ChangeToGreen", throwIfNotFound: true);
    }

    ~@InputController()
    {
        Debug.Assert(!m_Wizard.enabled, "This will cause a leak and performance issues, InputController.Wizard.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Wizard
    private readonly InputActionMap m_Wizard;
    private List<IWizardActions> m_WizardActionsCallbackInterfaces = new List<IWizardActions>();
    private readonly InputAction m_Wizard_Move;
    private readonly InputAction m_Wizard_Look;
    private readonly InputAction m_Wizard_Jump;
    private readonly InputAction m_Wizard_Atack;
    private readonly InputAction m_Wizard_CancelAtack;
    private readonly InputAction m_Wizard_ChangeToBlue;
    private readonly InputAction m_Wizard_ChangeToOrange;
    private readonly InputAction m_Wizard_ChangeToGreen;
    public struct WizardActions
    {
        private @InputController m_Wrapper;
        public WizardActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Wizard_Move;
        public InputAction @Look => m_Wrapper.m_Wizard_Look;
        public InputAction @Jump => m_Wrapper.m_Wizard_Jump;
        public InputAction @Atack => m_Wrapper.m_Wizard_Atack;
        public InputAction @CancelAtack => m_Wrapper.m_Wizard_CancelAtack;
        public InputAction @ChangeToBlue => m_Wrapper.m_Wizard_ChangeToBlue;
        public InputAction @ChangeToOrange => m_Wrapper.m_Wizard_ChangeToOrange;
        public InputAction @ChangeToGreen => m_Wrapper.m_Wizard_ChangeToGreen;
        public InputActionMap Get() { return m_Wrapper.m_Wizard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WizardActions set) { return set.Get(); }
        public void AddCallbacks(IWizardActions instance)
        {
            if (instance == null || m_Wrapper.m_WizardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WizardActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Atack.started += instance.OnAtack;
            @Atack.performed += instance.OnAtack;
            @Atack.canceled += instance.OnAtack;
            @CancelAtack.started += instance.OnCancelAtack;
            @CancelAtack.performed += instance.OnCancelAtack;
            @CancelAtack.canceled += instance.OnCancelAtack;
            @ChangeToBlue.started += instance.OnChangeToBlue;
            @ChangeToBlue.performed += instance.OnChangeToBlue;
            @ChangeToBlue.canceled += instance.OnChangeToBlue;
            @ChangeToOrange.started += instance.OnChangeToOrange;
            @ChangeToOrange.performed += instance.OnChangeToOrange;
            @ChangeToOrange.canceled += instance.OnChangeToOrange;
            @ChangeToGreen.started += instance.OnChangeToGreen;
            @ChangeToGreen.performed += instance.OnChangeToGreen;
            @ChangeToGreen.canceled += instance.OnChangeToGreen;
        }

        private void UnregisterCallbacks(IWizardActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Atack.started -= instance.OnAtack;
            @Atack.performed -= instance.OnAtack;
            @Atack.canceled -= instance.OnAtack;
            @CancelAtack.started -= instance.OnCancelAtack;
            @CancelAtack.performed -= instance.OnCancelAtack;
            @CancelAtack.canceled -= instance.OnCancelAtack;
            @ChangeToBlue.started -= instance.OnChangeToBlue;
            @ChangeToBlue.performed -= instance.OnChangeToBlue;
            @ChangeToBlue.canceled -= instance.OnChangeToBlue;
            @ChangeToOrange.started -= instance.OnChangeToOrange;
            @ChangeToOrange.performed -= instance.OnChangeToOrange;
            @ChangeToOrange.canceled -= instance.OnChangeToOrange;
            @ChangeToGreen.started -= instance.OnChangeToGreen;
            @ChangeToGreen.performed -= instance.OnChangeToGreen;
            @ChangeToGreen.canceled -= instance.OnChangeToGreen;
        }

        public void RemoveCallbacks(IWizardActions instance)
        {
            if (m_Wrapper.m_WizardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWizardActions instance)
        {
            foreach (var item in m_Wrapper.m_WizardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WizardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WizardActions @Wizard => new WizardActions(this);
    public interface IWizardActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAtack(InputAction.CallbackContext context);
        void OnCancelAtack(InputAction.CallbackContext context);
        void OnChangeToBlue(InputAction.CallbackContext context);
        void OnChangeToOrange(InputAction.CallbackContext context);
        void OnChangeToGreen(InputAction.CallbackContext context);
    }
}
